#pragma once

#include "monster_table.hpp"

enum eMonsterPropType {
    MONSTER_PROP_TYPE_MIN = 0,

    MONSTER_PROP_ID,
    MONSTER_PROP_NAME,
    MONSTER_PROP_KEYNAME,
    MONSTER_PROP_TYPE,
    MONSTER_PROP_MODEL,
    MONSTER_PROP_HEAD,
    MONSTER_PROP_RACE,
    MONSTER_PROP_LEVEL,
    MONSTER_PROP_HP,
    MONSTER_PROP_MP,
    MONSTER_PROP_MAXPHYDEF,
    MONSTER_PROP_MINPHYDEF,
    MONSTER_PROP_MAXMAGDEF,
    MONSTER_PROP_MINMAGDEF,
    MONSTER_PROP_MAXPHYATK,
    MONSTER_PROP_MINPHYATK,
    MONSTER_PROP_MAXMAGATK,
    MONSTER_PROP_MINMAGATK,
    MONSTER_PROP_HIT,
    MONSTER_PROP_MISS,
    MONSTER_PROP_SPECIALATTR,
    MONSTER_PROP_ATKTYPE,
    MONSTER_PROP_FIGTYPE,
    MONSTER_PROP_VIERANGE,
    MONSTER_PROP_TRARANGE,
    MONSTER_PROP_MOVRANGE,
    MONSTER_PROP_MOVTIME,
    MONSTER_PROP_ATTACKSPEED,
    MONSTER_PROP_ATTACKREADY,
    MONSTER_PROP_MOVESPEED,
    MONSTER_PROP_MOVEREADY,
    MONSTER_PROP_STEP,
    MONSTER_PROP_STEPWAIT,
    MONSTER_PROP_BACK,
    MONSTER_PROP_ESCAPESTEP,
    MONSTER_PROP_ESCAPERATE,
    MONSTER_PROP_SCRIPT,
    MONSTER_PROP_ENABLE,
    MONSTER_PROP_SKILLDAMAGECOFF,
    MONSTER_PROP_SKILLCASTINGRATE,
    MONSTER_PROP_EXP,
    MONSTER_PROP_BODYSIZE,
    MONSTER_PROP_DROP,
    MONSTER_PROP_MAGIC,
    MONSTER_PROP_EXISTTIME,
    MONSTER_PROP_NAMECOLOR,
    MONSTER_PROP_MONSTERAITYPE,

    MONSTER_PROP_TYPE_MAX,
};

inline bool GetMonsterProp(uint16_t nMonsterID, uint16_t nPropType)
{
    auto pConfig = sMonsterConfig.Get(nMonsterID);
    if (!pConfig) return false;

    if (nPropType <= MONSTER_PROP_TYPE_MIN || nPropType >= MONSTER_PROP_TYPE_MAX) return false;

    LUA_SAFE_BEGIN();

    switch (nPropType) {

        SETCASE(MONSTER_PROP_ID, Id);
        SETCASE(MONSTER_PROP_NAME, Name);
        SETCASE(MONSTER_PROP_KEYNAME, KeyName);
        SETCASE(MONSTER_PROP_TYPE, Type);
        SETCASE(MONSTER_PROP_MODEL, Model);
        SETCASE(MONSTER_PROP_HEAD, Head);
        SETCASE(MONSTER_PROP_RACE, Race);
        SETCASE(MONSTER_PROP_LEVEL, Level);
        SETCASE(MONSTER_PROP_HP, HP);
        SETCASE(MONSTER_PROP_MP, MP);
        SETCASE(MONSTER_PROP_MAXPHYDEF, MaxPhyDef);
        SETCASE(MONSTER_PROP_MINPHYDEF, MinPhyDef);
        SETCASE(MONSTER_PROP_MAXMAGDEF, MaxMagDef);
        SETCASE(MONSTER_PROP_MINMAGDEF, MinMagDef);
        SETCASE(MONSTER_PROP_MAXPHYATK, MaxPhyAtk);
        SETCASE(MONSTER_PROP_MINPHYATK, MinPhyAtk);
        SETCASE(MONSTER_PROP_MAXMAGATK, MaxMagAtk);
        SETCASE(MONSTER_PROP_MINMAGATK, MinMagAtk);
        SETCASE(MONSTER_PROP_HIT, Hit);
        SETCASE(MONSTER_PROP_MISS, Miss);
        SETCASE_MAP(MONSTER_PROP_SPECIALATTR, SpecialAttr);
        SETCASE(MONSTER_PROP_ATKTYPE, AtkType);
        SETCASE(MONSTER_PROP_FIGTYPE, FigType);
        SETCASE(MONSTER_PROP_VIERANGE, VieRange);
        SETCASE(MONSTER_PROP_TRARANGE, TraRange);
        SETCASE(MONSTER_PROP_MOVRANGE, MovRange);
        SETCASE(MONSTER_PROP_MOVTIME, MovTime);
        SETCASE(MONSTER_PROP_ATTACKSPEED, AttackSpeed);
        SETCASE(MONSTER_PROP_ATTACKREADY, AttackReady);
        SETCASE(MONSTER_PROP_MOVESPEED, MoveSpeed);
        SETCASE(MONSTER_PROP_MOVEREADY, MoveReady);
        SETCASE(MONSTER_PROP_STEP, Step);
        SETCASE(MONSTER_PROP_STEPWAIT, StepWait);
        SETCASE(MONSTER_PROP_BACK, Back);
        SETCASE(MONSTER_PROP_ESCAPESTEP, EscapeStep);
        SETCASE(MONSTER_PROP_ESCAPERATE, EscapeRate);
        SETCASE(MONSTER_PROP_SCRIPT, Script);
        SETCASE_SET(MONSTER_PROP_ENABLE, Enable);
        SETCASE_MAP(MONSTER_PROP_SKILLDAMAGECOFF, SkillDamageCoff);
        SETCASE_MAP(MONSTER_PROP_SKILLCASTINGRATE, SkillCastingRate);
        SETCASE(MONSTER_PROP_EXP, Exp);
        SETCASE(MONSTER_PROP_BODYSIZE, BodySize);
        SETCASE(MONSTER_PROP_DROP, Drop);
        SETCASE(MONSTER_PROP_MAGIC, Magic);
        SETCASE(MONSTER_PROP_EXISTTIME, ExistTime);
        SETCASE(MONSTER_PROP_NAMECOLOR, NameColor);
        SETCASE(MONSTER_PROP_MONSTERAITYPE, MonsterAIType);
        
    }

    LUA_SAFE_END(false);

    return true;
}
