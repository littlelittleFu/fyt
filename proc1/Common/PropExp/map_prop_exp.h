#pragma once

#include "map_table.hpp"

enum eMapPropType {
    MAP_PROP_TYPE_MIN = 0,

    MAP_PROP_ID,
    MAP_PROP_GSINDEX,
    MAP_PROP_KEYNAME,
    MAP_PROP_LOGIC,
    MAP_PROP_MAPTYPE,
    MAP_PROP_NAME,
    MAP_PROP_SCRIPT,
    MAP_PROP_MAXLEVEL,
    MAP_PROP_MINLEVEL,
    MAP_PROP_PKMAX,
    MAP_PROP_PKMIN,
    MAP_PROP_JOB,
    MAP_PROP_GENDER,
    MAP_PROP_TOFFLINE,
    MAP_PROP_TX,
    MAP_PROP_TY,
    MAP_PROP_ITEMTYPE,
    MAP_PROP_ITEMID,
    MAP_PROP_SKILLTYPE,
    MAP_PROP_SKILLID,
    MAP_PROP_HERO,
    MAP_PROP_RIDING,
    MAP_PROP_TEAM,
    MAP_PROP_LIGHTXR,
    MAP_PROP_LIGHTYR,
    MAP_PROP_BAGDROP,
    MAP_PROP_EQUIPDROP,
    MAP_PROP_TALK,
    MAP_PROP_DROPABLE,
    MAP_PROP_OPTION,
    MAP_PROP_SHOWUI,
    MAP_PROP_BACKPIC,
    MAP_PROP_ENTEREFFECT,
    MAP_PROP_LEFTEFFECT,
    MAP_PROP_MINIMAP,
    MAP_PROP_CANTALK,
    MAP_PROP_KILLPK,
    MAP_PROP_CROSSHUMAN,
    MAP_PROP_CROSSMONSTER,
    MAP_PROP_RIDE,
    MAP_PROP_MASK,
    MAP_PROP_CUSTOMMINIMAP,
    MAP_PROP_MAPBG,
    MAP_PROP_SHOWBIGTHUMBNAIL,
    MAP_PROP_SOUNDINFO,
    MAP_PROP_ADDKILLERTOBLACKLIST,

    MAP_PROP_TYPE_MAX,
};

inline bool GetMapProp(uint16_t nMapID, uint16_t nPropType)
{
    auto pConfig = sMapConfig.Get(nMapID);
    if (!pConfig) return false;

    if (nPropType <= MAP_PROP_TYPE_MIN || nPropType >= MAP_PROP_TYPE_MAX) return false;

    LUA_SAFE_BEGIN();

    switch (nPropType) {

        SETCASE(MAP_PROP_ID, Id);
        SETCASE(MAP_PROP_GSINDEX, GSIndex);
        SETCASE(MAP_PROP_KEYNAME, KeyName);
        SETCASE(MAP_PROP_LOGIC, Logic);
        SETCASE(MAP_PROP_MAPTYPE, MapType);
        SETCASE(MAP_PROP_NAME, Name);
        SETCASE(MAP_PROP_SCRIPT, Script);
        SETCASE(MAP_PROP_MAXLEVEL, MaxLevel);
        SETCASE(MAP_PROP_MINLEVEL, MinLevel);
        SETCASE(MAP_PROP_PKMAX, PKMax);
        SETCASE(MAP_PROP_PKMIN, PKMin);
        SETCASE(MAP_PROP_JOB, Job);
        SETCASE(MAP_PROP_GENDER, Gender);
        SETCASE(MAP_PROP_TOFFLINE, TOffline);
        SETCASE(MAP_PROP_TX, TX);
        SETCASE(MAP_PROP_TY, TY);
        SETCASE(MAP_PROP_ITEMTYPE, ItemType);
        SETCASE(MAP_PROP_ITEMID, ItemId);
        SETCASE(MAP_PROP_SKILLTYPE, SkillType);
        SETCASE(MAP_PROP_SKILLID, SkillId);
        SETCASE(MAP_PROP_HERO, Hero);
        SETCASE(MAP_PROP_RIDING, Riding);
        SETCASE(MAP_PROP_TEAM, Team);
        SETCASE(MAP_PROP_LIGHTXR, LightXr);
        SETCASE(MAP_PROP_LIGHTYR, LightYr);
        SETCASE(MAP_PROP_BAGDROP, BagDrop);
        SETCASE(MAP_PROP_EQUIPDROP, EquipDrop);
        SETCASE(MAP_PROP_TALK, Talk);
        SETCASE(MAP_PROP_DROPABLE, Dropable);
        SETCASE(MAP_PROP_OPTION, Option);
        SETCASE(MAP_PROP_SHOWUI, ShowUI);
        SETCASE(MAP_PROP_BACKPIC, BackPic);
        SETCASE(MAP_PROP_ENTEREFFECT, EnterEffect);
        SETCASE(MAP_PROP_LEFTEFFECT, LeftEffect);
        SETCASE(MAP_PROP_MINIMAP, MiniMap);
        SETCASE(MAP_PROP_CANTALK, CanTalk);
        SETCASE(MAP_PROP_KILLPK, KillPk);
        SETCASE(MAP_PROP_CROSSHUMAN, CrossHuman);
        SETCASE(MAP_PROP_CROSSMONSTER, CrossMonster);
        SETCASE(MAP_PROP_RIDE, Ride);
        SETCASE(MAP_PROP_MASK, Mask);
        SETCASE(MAP_PROP_CUSTOMMINIMAP, CustomMiniMap);
        SETCASE(MAP_PROP_MAPBG, MapBg);
        SETCASE(MAP_PROP_SHOWBIGTHUMBNAIL, ShowBigThumbnail);
        SETCASE(MAP_PROP_SOUNDINFO, SoundInfo);
        SETCASE(MAP_PROP_ADDKILLERTOBLACKLIST, AddKillerToBlackList);
    }

    LUA_SAFE_END(false);

    return true;
}
